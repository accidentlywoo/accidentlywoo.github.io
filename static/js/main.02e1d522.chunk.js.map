{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["velogList","id","title","Header","Nav","className","map","el","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAKMA,G,gBAAY,CAChB,CAACC,GAAI,EAAGC,MAAO,QACf,CAACD,GAAI,EAAGC,MAAO,QACf,CAACD,GAAI,EAAGC,MAAO,UACf,CAACD,GAAI,EAAGC,MAAO,OACf,CAACD,GAAI,EAAGC,MAAO,UACf,CAACD,GAAI,EAAGC,MAAO,cACf,CAACD,GAAI,EAAGC,MAAO,WAyBjB,SAASC,IACP,OACE,gCACE,sDACA,iIAKN,SAASC,IACP,OACI,yBAAKC,UAAU,UACb,4BACGL,EAAUM,KAAI,SAAAC,GAAE,OACf,4BAAI,4BAAQF,UAAU,mBAAmBE,EAAGL,aAOxD,SAASM,IACP,OACE,gCACE,0CAAqB,gEAKZC,MAnDf,WACE,OACE,yBAAKJ,UAAU,uBACb,kBAACF,EAAD,MACA,kBAACC,EAAD,MACA,iCACE,6BACA,sEAEF,iCACE,wHACA,8MAIA,qHAEF,kBAACI,EAAD,QCpBcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02e1d522.chunk.js","sourcesContent":["import React from 'react';\n// import { Button, ButtonToolbar } from 'react-bootstrap';\nimport './css/reset.css';\nimport './css/main.css';\n// 오또카징\nconst velogList = [\n  {id: 1, title: \"HOME\"},\n  {id: 2, title: \"JAVA\"},\n  {id: 3, title: \"SPRING\"},\n  {id: 4, title: \"JPA\"},\n  {id: 5, title: \"PYTHON\"},\n  {id: 6, title: \"JAVASCRIPT\"},\n  {id: 7, title: \"REACT\"},\n];\n\nfunction App() {\n  return (\n    <div className=\"App container-fluid\">\n      <Header />\n      <Nav />\n      <section>\n        <h2></h2>\n        <p>최신글 메인1개</p>\n      </section>\n      <section>\n        <h2>ToDoList인척하다 나중에 블로그리스트</h2>\n        <p>\n          무한 스크롤 블로그 글 뿌리기,\n          CSS BootStrap 활용하기 : 어떻게 적용하는거야?\n        </p>\n        <p>패키지 구조는 어떻게 한담... ㅠㅠ</p>\n      </section>\n      <Footer />\n    </div>\n  );\n}\n\nfunction Header() { \n  return (\n    <header>\n      <h1>Accidentlywoo.Velog.io</h1>\n      <small>백엔드의 대환장 프론트앤드 개발기</small>\n    </header>\n  );\n}\n\nfunction Nav() { \n  return (\n      <nav className=\"navbar\">\n        <ul>\n          {velogList.map(el => (\n            <li><button className=\"btn btn-default\">{el.title}</button></li>\n          ))}\n        </ul>\n      </nav>\n  );\n}\n\nfunction Footer() { \n  return (\n    <footer>\n      <span>github: </span><a>https://github.com/accidentlywoo</a>\n    </footer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}